<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hsuan&#39;s Coding Blog</title>
    <link>https://hsuanblog.live/</link>
    <description>Recent content on Hsuan&#39;s Coding Blog</description>
    <image>
      <title>Hsuan&#39;s Coding Blog</title>
      <url>https://hsuanblog.live/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://hsuanblog.live/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.125.7</generator>
    <language>en</language>
    <lastBuildDate>Tue, 14 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hsuanblog.live/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Dockerize NestJS</title>
      <link>https://hsuanblog.live/posts/nestdocker/</link>
      <pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/nestdocker/</guid>
      <description>This article provide a straightforward guide to dockerizing NestJS application for both develpoment and production environments.
Dockerfile for Development First, let&amp;rsquo;s create a Dockerfile.dev for the development environment within our NestJS repository:
# Dockerfile.dev FROM node:20-alpine WORKDIR /usr/src/app EXPOSE 3000 CMD [&amp;#34;npm&amp;#34;, &amp;#34;run&amp;#34;, &amp;#34;start:dev&amp;#34;] COPY package*.json ./ RUN npm install COPY . . In this Dockerfile, we specify the Node.js version along with the Alpine Linux distribution to minimize the image size.</description>
    </item>
    <item>
      <title>Laravel 關聯 Model</title>
      <link>https://hsuanblog.live/posts/laravel-%E9%97%9C%E8%81%AF-model/</link>
      <pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/laravel-%E9%97%9C%E8%81%AF-model/</guid>
      <description>Laravel 關聯性Model基礎操作：belongs_to, has_one, has_many, many to many
1. 一對一關係 has_one 假設兩個Model：店主Owner、商店Store，店主擁有一間商店(Owner has one Store)，商店屬於一位店主(Store belongs to Owner)。
Owner: - id - name Store: - id - name - owner_id 首先要為Store創建欄位owner_id，在migration中可以使用$table-&amp;gt;foreignId(&#39;owner_id&#39;)建立欄位(foreignId等同於unsignedBigInt)。
Owner.php中寫入hasOne：
// app/Models/Owner.php public function store() { return $this-&amp;gt;hasOne(Store::class); } Store.php中寫入belonsTo：
// app/Models/Store.php public function owner() { return $this-&amp;gt;belongsTo(Owner::class); } 使用方法：
// 從Owner角度建立Store // 方法一：使用create $o1 = Owner::find(1); $o1-&amp;gt;store()-&amp;gt;create([&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;store1&amp;#39;]); // 方法二：使用save $o1 = Owner::find(1); $s2 = new Store([&amp;#39;name&amp;#39;=?&amp;#39;store2&amp;#39;]); $o1-&amp;gt;store()-&amp;gt;save($s2); // 從Store角度建立Owner $o2 = Owner::find(2); $s3 = new Store([&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;store3&amp;#39;]); $s3-&amp;gt;owner()-&amp;gt;associate($o2); $s3-&amp;gt;save(); // 撈取該Owner的Store $o1-&amp;gt;store; $o1-&amp;gt;store-&amp;gt;name; // 撈取該Store的Owner $s1-&amp;gt;owner; $s1-&amp;gt;owner-&amp;gt;name; hasOne與belongsTo都可以獨立設置foreign key或owner key：</description>
    </item>
    <item>
      <title>PHP 使用筆記</title>
      <link>https://hsuanblog.live/posts/php-%E4%BD%BF%E7%94%A8%E7%AD%86%E8%A8%98/</link>
      <pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/php-%E4%BD%BF%E7%94%A8%E7%AD%86%E8%A8%98/</guid>
      <description>PHP (Hypertext Prepocessor) 超文字預處理器，為直譯式的程式語言，可嵌入在HTML中使用。這裡記錄了PHP基礎語法與常見的函數。
1. 環境安裝與設定 下載PHP的方式：
MAMP(適合Wordpress) Homebrew(適合Laravel等框架) 常見的web server:
Apache Nginx(需要處理fpm) PHP自帶的web server(不是很好用) PHP設定檔為php.ini，位在/opt/homebrew/etc/php/8.1/
1.1 Homebrew 安裝 PHP $ brew install php $ brew install php@8.1 # reopen terminal $ which php # /opt/homebrew/bin/php $ ls -al &amp;#34;php安裝的路徑&amp;#34; $ brew link php $ brew unlink php $ echo $PATH # 前面的指令優先級較高 $ php -S 127.0.0.1:8000 # 運行index.php 2. PHP基礎語法 PHP使用&amp;lt;?php、?&amp;gt;作為開頭與結尾：
&amp;lt;?php // php code ?&amp;gt; 2.1 註解 Comment // 單行註解，較常使用 # linux風格的單行註解 /* 這是 多行縮排 */ 2.</description>
    </item>
    <item>
      <title>Rails Polymorphic</title>
      <link>https://hsuanblog.live/posts/rails-polymorphic/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/rails-polymorphic/</guid>
      <description>如何使用 Polymorphic Associations 多型關聯。
1. 使用情境 想像你正在設計「評論」功能的資料庫架構，使用者可以在幾乎任何地方留下評論，例如產品、貼文、活動等，此時你會想到使用一對多關係，為這三個 Model 設計出ProductComment、PostComment、EventComment，但此時你發現這三個資料表的欄位幾乎一模一樣，如果分成三個 Model 顯得相當冗餘，此種情景就相當適合使用Polymorphic 多型關聯來簡化資料庫的設計，使用Polymophic可以使模型在同一個關聯上屬於多個模型。
2. 使用方法 同樣以Comment這個model舉例，建立Polymorphic model的指令： rails g model Comment content:text commentable:references{polymorphic}
觀察一下產生的 migration 檔：
# 產生的migration檔案，references版本 class CreateComments &amp;lt; ActiveRecord::Migration[7.0] def change create_table :comments do |t| t.text :content t.references :commentable, polymorphic: true, null: false t.timestamps end end end # 產生的migration檔案，較複雜的版本 class CreateComments &amp;lt; ActiveRecord::Migration[7.0] def change create_table :comments do |t| t.string :name t.bigint :commentable_id t.string :commentable_type t.timestamps end add_index :comments, [:commentable_type, :commentable_id] end end 接著執行rails db:migrate在資料庫產生資料表與更新schema。</description>
    </item>
    <item>
      <title>Rails N&#43;1問題 with joins, includes, preload and eager_load</title>
      <link>https://hsuanblog.live/posts/rails-includes-joins-preload-eager_load/</link>
      <pubDate>Thu, 08 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/rails-includes-joins-preload-eager_load/</guid>
      <description>資料庫的操作是影響網站效能的重要因素，而在存取資料時幾乎一定會遇到 N+1 問題。本篇文章將簡要探討 includes 的使用時機，以及與其相似的 preload 和 eager_load 方法。此外，我們還會介紹在處理多表格操作時常用的 joins。
1. 造成 N+1 問題的原因 我們先想像一個情境，你正在開發商家的訂單系統，其中有兩個 Model，分別是Customer與Order，Customer記載顧客資料，並且每個顧客擁有多筆訂單Order # customer.rb class Customer &amp;lt; ApplicationRecord has_many :orders end # order.rb class Order &amp;lt; ApplicationRecord belongs_to :customer end 現在我們想要呈現4位顧客的個人資訊以及他們各自的所有訂單，你可能會這樣寫： Customer.limit(4).each{|customer| puts customer.orders} Rails ORM 產生的 SQL 指令如下：
SELECT &amp;#39;customers&amp;#39;.* FROM &amp;#39;customers&amp;#39; LIMIT 4 SELECT &amp;#39;orders&amp;#39;.* FROM &amp;#39;orders&amp;#39; WHERE &amp;#39;orders&amp;#39;.&amp;#39;customer_id&amp;#39;=1 SELECT &amp;#39;orders&amp;#39;.* FROM &amp;#39;orders&amp;#39; WHERE &amp;#39;orders&amp;#39;.&amp;#39;customer_id&amp;#39;=2 SELECT &amp;#39;orders&amp;#39;.* FROM &amp;#39;orders&amp;#39; WHERE &amp;#39;orders&amp;#39;.&amp;#39;customer_id&amp;#39;=3 SELECT &amp;#39;orders&amp;#39;.* FROM &amp;#39;orders&amp;#39; WHERE &amp;#39;orders&amp;#39;.</description>
    </item>
    <item>
      <title>Rails 基礎 ORM 的 SQL 語法</title>
      <link>https://hsuanblog.live/posts/rails-%E5%9F%BA%E7%A4%8E-orm-%E5%B0%8D%E6%87%89%E7%9A%84-sql-%E8%AA%9E%E6%B3%95/</link>
      <pubDate>Sun, 04 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/rails-%E5%9F%BA%E7%A4%8E-orm-%E5%B0%8D%E6%87%89%E7%9A%84-sql-%E8%AA%9E%E6%B3%95/</guid>
      <description>儘管Rails開發者可以透過 ActiveRecord 簡單地操作資料庫資源，但仍然需要了解基本的 SQL 語法。以下是常見 ORM 指令的翻譯，可以幫助你真正理解背後的運作原理。 較複雜的資料庫關係語法（例如：includes、join）將不在條列於本文中，我們將在另一篇文章中探討這些內容。
Create create: 使用 create 創建資料，或透過 new 產生物件之後再使用 save，以上狀況所產生的SQL語法如下。 Book.create(name: &amp;#34;學習Rails&amp;#34;, author: &amp;#34;Eddie&amp;#34;, intro: &amp;#34;學習Rails好幫手&amp;#34;, price: 100) or Book.new(name: &amp;#34;學習Rails&amp;#34;, author: &amp;#34;Eddie&amp;#34;, intro: &amp;#34;學習Rails好幫手&amp;#34;, price: 100) Book.save INSERT INTO books(name, author, intro, price, updated_at) VALUES (&amp;#39;學習Rails&amp;#39;, &amp;#39;Eddie&amp;#39;, &amp;#39;學習Rails好幫手&amp;#39;, 100, &amp;#39;2023...&amp;#39;) Read all: Book.all SELECT * FROM books select or pluck: select 和 pluck 最終得到的資料形式不同，這裡不多做討論，只要知道Rails進一步的處理是在從資料庫抓取資料後，兩者前期的SQL語法沒有不同 Book.select(&amp;#34;name&amp;#34;) Book.pluck(&amp;#34;name&amp;#34;) SELECT name FROM books limit or offset: Book.</description>
    </item>
    <item>
      <title>Ruby 實體方法 vs 類別方法</title>
      <link>https://hsuanblog.live/posts/ruby-%E5%AF%A6%E9%AB%94%E6%96%B9%E6%B3%95-vs-%E9%A1%9E%E5%88%A5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/ruby-%E5%AF%A6%E9%AB%94%E6%96%B9%E6%B3%95-vs-%E9%A1%9E%E5%88%A5%E6%96%B9%E6%B3%95/</guid>
      <description>快速了解 Ruby 中 實體方法(Instance method) 與 類別方法(Class method)的差異。
方法 Method Ruby 世界的方法(Mehod)可以對應到其他程式語言中的函式(function)，將一些行為定義在方法中，藉由帶入引數並執行方法的過程來簡化程式的撰寫，以及達到程式碼重複利用的效果。Ruby 中的方法由def開頭，並且以小寫、蛇式的方式命名，例如下方範例中，簡單定義了一個方法並於外部呼叫，方法執行結束前會回傳最後ㄧ行的執行結果。
def calculate_bmi(weight_kg, height_m) weight_kg / height_m ** 2 end p calculate_bmi(60, 1.75) # 19.591836734693878 實體方法 ＆ 類別方法 實體(Instance)是由類別(Class)為模板所產生的獨立物件，他可以使用定義在類別中的實體方法，但是不能使用定義在類別中的類別方法。同樣的，類別本身可以使用類別方法， 但是不能使用實體方法。
簡單來說，實體方法與類別方法的使用對象不同，實體方法 for 實體，類別方法 for 類別，雖然方法都是定義在類別中，但是兩者是不能混用的。
class Student def initialize(name) @name = name end def self.say_classroom_name p &amp;#34;All students are in Room 311&amp;#34; end def say_my_name p &amp;#34;My name is #{@name}&amp;#34; end end student01 = Student.new(&amp;#34;Lisa&amp;#34;) student02 = Student.new(&amp;#34;Kevin&amp;#34;) student01.</description>
    </item>
    <item>
      <title>Rails 使用 PostgreSQL</title>
      <link>https://hsuanblog.live/posts/rails%E4%B8%AD%E4%BD%BF%E7%94%A8postgresql/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/rails%E4%B8%AD%E4%BD%BF%E7%94%A8postgresql/</guid>
      <description>Rails 預設的資料庫是 Sqlite，如欲使用較為專業的開源資料庫 PostgreSQL，可參照此說明筆記進行操作。
安裝 PostgreSQL on Mac 使用 Homebrew 套件管理工具安裝： $ brew install postgresql（預設安裝 postgreSQL v14） 安裝後重新啟動$ brew services restart postgresql 重新啟動 Terminal 查看版本$ postgres --version或$ psql --version 在 Rails 專案建立 PostgreSQL 資料庫 Pre-requisites： 確認已經在本機中安裝 PostgreSQL 本機中必須保持運行 PostgreSQL，可透過$ brew service list查看運行狀況。 postgresql@14 started hsuan ~/Library/LaunchAgents/homebrew.mxcl.postgresql@14.plist 如果 PostgreSQL 沒有於背景運行，可見以下相關啟動 PostgreSQL 的操作指令：
方法一使用 psql 手動啟動和停止 PostgreSQL，每次需要輸入相應的指令(較不推薦)。 psql -D /usr/local/var/postgres start psql -D /usr/local/var/postgres stop 方法二使用 Homebrew 服務管理工具啟動和停止 PostgreSQL。此方法將 PostgreSQL 服務作為系統常駐運行的服務，可在在系統啟動後自動啟動(推薦)。 $ brew services start postgresql $ brew services stop postgresql $ brew services restart postgresql Step1：安裝 pg gem 方法 1：建立新專案時就選擇使用 PostgreSQL：$ rails new myapp --database=postgresql 方法 2：單純 new 新專案，接著安裝 pg gem： $ bundle add pg+$ bundle install 方法 1 較為推薦，可以讓 rails 自動幫妳生成相關設定，如果是使用方法 2，則要將原先在 Gemfile 中的gem sqlite3手動移除，只保留gem pg（通常一個專案僅需要一個資料庫） Step2：設定資料庫 adapter 接著設定 Rails 專案的 config/database.</description>
    </item>
    <item>
      <title>Rails ORM 常見的CRUD指令</title>
      <link>https://hsuanblog.live/posts/rails-orm-%E5%B8%B8%E8%A6%8B%E7%9A%84crud%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/rails-orm-%E5%B8%B8%E8%A6%8B%E7%9A%84crud%E6%8C%87%E4%BB%A4/</guid>
      <description>CRUD = Create Read Update Delete是網站開發中的基本，在此筆記常用到的Rails CRUD指令。
Create new：產生新資料，但不會存檔 create：產生新資料，會直接存檔 create!：與create相同，但過程中發生錯誤時會報錯 new_book = Book.new(name: &amp;#34;老人與海&amp;#34;, price: 300) new_book.save Book.create(name: &amp;#34;Les Misérables&amp;#34;, author: &amp;#34;Victor Hugo&amp;#34;) Read all：一次抓取所有資料 limit()：抓去特定數量資料 first &amp;amp; last：找到該資料類型中的第一筆 &amp;amp; 最後一筆資料 find_by(id: 1)：找到第一筆符合條件的資料，找不到會回傳nil find_by!(id: 1)：與find_by相同，但是找不到資料會報錯 find(1)：依據id找尋資料，找不到資料會報錯 select(&#39;name&#39;)：只抓出資料表中的特定欄位（資料表欄位太多時可以節省記憶體空間） where()：以陣列的形式回傳找到的多筆符合條件的資料，找不到回傳空矩陣 find_by_sql()：使用sql語法查詢（較少使用） order(&#39;price AESC&#39;)：依照遞增或遞減順序抓取所有資料 order(price: :aesc)：order的不同寫法 find_each：batch find寫法，預設先抓出1000筆資料，當資料量太多時使用 Book.all Book.limit(5) // 抓取前五筆資料 Book.offset(5).limit(5) // 抓取下五筆資料 Book.first Book.last Book.find(id: 10) Book.find_by(id: 10, author: &amp;#34;Victor Hugo&amp;#34;) // 依據多個條件尋找 and Book.find_by!(id: 9999) //報錯： in `find_by!&amp;#39;: Couldn&amp;#39;t find Book (ActiveRecord::RecordNotFound) Book.</description>
    </item>
    <item>
      <title>JavaScript 中的 Call by sharing </title>
      <link>https://hsuanblog.live/posts/javascript-%E4%B8%AD%E7%9A%84-call-by-sharing/</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/javascript-%E4%B8%AD%E7%9A%84-call-by-sharing/</guid>
      <description>Call by value、Call by reference在一般的程式語言中是常見的基本觀念，但在JavaScript中多了一項Call by sharing，這裡做個簡單的說明。
1. Data Type JavaScript 的資料類別可以分為：
基本型別（Primitive）：string、number、boolean、null、undefined 物件型別（Object）：object、symbol 基本型別會以純值的形式存在，而物件型別則是由零或不同型別的值所組成。
這邊之所以提及 Data Type 是因為資料類別會決定 call by value、call by reference、call by sharing 的運作時機。
2. 變數的真實樣貌 在提到 call by value 之前，我們先簡單講解平常看到的「變數」在程式中的真實樣貌。
當我們宣告一個變數時，如：let num = 1234，程式會自動分配一份記憶體空間，空間內部可以存放我們想要的資料，並且給予該空間一個名字。 以這段程式碼為例，num便是記憶體空間的名字（variable name），123是變數初始化後內部所存放的資料（variable value），另外還有我們平常看不到，用來標注空間所在位置的記憶體地址（memory address）。
3. 基本型別 ＆ 物件型別 變數作為一個資料容器，當內部儲存的數值是基本型態時進行比較：
let a = &amp;#34;Dog&amp;#34;; let b = &amp;#34;Dog&amp;#34;; let c = &amp;#34;Cat&amp;#34;; // 變數之間進行數值比較 console.log(a === b); //true console.log(b === c); //false 基本型態下兩者的比較結果可想而知，比較式會取出兩變數內的「值」進行比較，但是當變數內部儲存的值是物件型態時，比較結果會有所不同：</description>
    </item>
    <item>
      <title>JavaScript 矩陣, 字串, 數字 實用語法集</title>
      <link>https://hsuanblog.live/posts/js%E5%AF%A6%E7%94%A8%E8%AA%9E%E6%B3%95/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://hsuanblog.live/posts/js%E5%AF%A6%E7%94%A8%E8%AA%9E%E6%B3%95/</guid>
      <description>大家在新學習一門程式語言時，想必都會經歷一段不斷刷題練習的時期，在練題及翻閱官方文件的過程中除了更加熟悉該語言，同時也累積了不少好用的語法及函式，藉由這個筆記，希望可以幫助大家統整 JS 中實用的語法與操作，筆記主要著重在矩陣、數字、字串間的使用方法與關係，那些過於複雜或冷門的就不收錄了。
1. String 使用方法 字串轉矩陣 Convert string to array:
在確認是否轉換成功時要使用isArray，不能使用typeof(typeof 回傳結果是number)
// ES6 spread syntax ... [...str] ex: let arr = [...&amp;#34;123&amp;#34;] // [&amp;#34;1&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;3&amp;#34;] // split() str.split() ex: &amp;#34;123&amp;#34;.split(&amp;#34;&amp;#34;) // [&amp;#34;1&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;3&amp;#34;] ex: &amp;#34;123&amp;#34;.split() // [&amp;#34;123&amp;#34;] // Array.from() Array.from(str) ex: Array.from(&amp;#34;123&amp;#34;) // [&amp;#34;1&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;3&amp;#34;] 字串中取出字串 Extract string from string:
//slice， startIndex ~ endIndex，endIndex 不包括在內，回傳新 string，原 string 不變 //str.slice(startIndex, endIndex); ex: &amp;#34;01234&amp;#34;.slice(1, 3); // &amp;#34;12&amp;#34; ex: &amp;#34;01234&amp;#34;.slice(3, 1000); // &amp;#34;34&amp;#34; ex: &amp;#34;01234&amp;#34;.</description>
    </item>
  </channel>
</rss>
